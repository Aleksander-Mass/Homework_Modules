'''
Пункты задачи:
Создайте модули fake_math и true_math.
Напишите функции divide в обоих методах. Разница между этими функциями - возвращаемое значение.
Создайте модуль module_4_1 (если ещё не создан), импортируйте в него функции divide из модулей fake_math и true_math,
назвав их разными именами на своё усмотрение, чтобы не было конфликтов имён, при помощи оператора as.
Запустите эти функции в модуле module_4_1, передав первым аргументом произвольное число отличное от 0, вторым аргументом - 0
Выведи результаты вызовов этих функций на экран(в консоль).
'''
# Создайте модуль module_4_1 (если ещё не создан), импортируйте в него функции divide из модулей fake_math и true_math,
# назвав их разными именами на своё усмотрение, чтобы не было конфликтов имён, при помощи оператора as.

# Модуль module_4_1.py:

from fake_math import divide as fake_divide
from true_math import divide as true_divide

# Запустите эти функции в модуле module_4_1, передав первым аргументом произвольное число отличное от 0, вторым аргументом - 0

# Тестовые вызовы функций
result1 = fake_divide(69, 3)
result2 = fake_divide(3, 0)
result3 = true_divide(49, 7)
result4 = true_divide(15, 0)

# Вывод результатов на экран
print(result1)  # Ожидаемый результат: 23.0
print(result2)  # Ожидаемый результат: Ошибка
print(result3)  # Ожидаемый результат: 7.0
print(result4)  # Ожидаемый результат: inf

'''
Как это работает:
*** В модуле fake_math функция divide возвращает строку 'Ошибка', если второй аргумент равен 0, и результат деления в остальных случаях.

*** В модуле true_math функция divide возвращает inf (бесконечность), если второй аргумент равен 0, и результат деления 
    в остальных случаях.

*** В модуле module_4_1 функции divide из разных модулей импортируются с разными именами (fake_divide и true_divide), 
    чтобы избежать конфликта имен. Эти функции вызываются с разными аргументами, а результаты выводятся на экран.
    
Теперь, если вы выполните код в module_4_1.py, то увидите в консоли ожидаемый результат:
'''

# => 23.0
# => Ошибка
# => 7.0
# => inf

# Эти модули можно сохранить как отдельные файлы .py и запускать код в module_4_1.py, чтобы протестировать результат.